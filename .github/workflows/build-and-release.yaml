name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure all tags are fetched

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.21

      - name: Download Helm Binaries
        run: |
          curl -LO https://get.helm.sh/helm-v3.11.2-linux-amd64.tar.gz
          tar -zxvf helm-v3.11.2-linux-amd64.tar.gz
          mv linux-amd64/helm assets/helm-linux
          
          curl -LO https://get.helm.sh/helm-v3.11.2-darwin-amd64.tar.gz
          tar -zxvf helm-v3.11.2-darwin-amd64.tar.gz
          mv darwin-amd64/helm assets/helm-darwin

      - name: Get the latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
          echo "::set-output name=tag::$latest_tag"

      - name: Calculate next version
        id: calculate_version
        run: |
          latest_tag=${{ steps.get_tag.outputs.tag }}
          echo "Latest tag: $latest_tag"
          
          if [[ $latest_tag == v* ]]; then
            latest_version=${latest_tag:1}
          else
            latest_version=$latest_tag
          fi
          
          IFS='.' read -r -a version_parts <<< "$latest_version"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" != refs/tags/* ]]; then
            patch=$((patch + 1))
          fi
          
          new_version="v$major.$minor.$patch"
          echo "New version: $new_version"
          echo "::set-output name=version::$new_version"

      - name: Build Linux Binary
        run: GOOS=linux GOARCH=amd64 go build -ldflags "-X github.com/OpenVirtualCluster/ovc/cmd.Version=${{ steps.calculate_version.outputs.version }}" -o ovc-linux

      - name: Build macOS Binary
        run: GOOS=darwin GOARCH=amd64 go build -ldflags "-X github.com/OpenVirtualCluster/ovc/cmd.Version=${{ steps.calculate_version.outputs.version }}" -o ovc-darwin

      - name: Build Windows Binary
        run: GOOS=windows GOARCH=amd64 go build -ldflags "-X github.com/OpenVirtualCluster/ovc/cmd.Version=${{ steps.calculate_version.outputs.version }}" -o ovc.exe

      - name: Calculate SHA256 Checksums
        run: |
          sha256sum ovc-linux > ovc-linux.sha256
          sha256sum ovc-darwin > ovc-darwin.sha256
          sha256sum ovc.exe > ovc.exe.sha256

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ovc
          path: |
            ovc-linux
            ovc-darwin
            ovc.exe
            ovc-linux.sha256
            ovc-darwin.sha256
            ovc.exe.sha256

  release:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure all tags are fetched

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: ovc

      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Get the latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
          echo "::set-output name=tag::$latest_tag"

      - name: Calculate next version
        id: calculate_version
        run: |
          latest_tag=${{ steps.get_tag.outputs.tag }}
          echo "Latest tag: $latest_tag"
          
          if [[ $latest_tag == v* ]]; then
            latest_version=${latest_tag:1}
          else
            latest_version=$latest_tag
          fi
          
          IFS='.' read -r -a version_parts <<< "$latest_version"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" != refs/tags/* ]]; then
            patch=$((patch + 1))
          fi
          
          new_version="v$major.$minor.$patch"
          echo "New version: $new_version"
          echo "::set-output name=version::$new_version"

      - name: Check if Tag Exists
        id: tag_exists
        run: |
          if git rev-parse "refs/tags/${{ steps.calculate_version.outputs.version }}" >/dev/null 2>&1; then
            echo "Tag exists"
            echo "::set-output name=exists::true"
          else
            echo "Tag does not exist"
            echo "::set-output name=exists::false"
          fi

      - name: Create Release Tag
        if: steps.tag_exists.outputs.exists == 'false'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_tag=${{ steps.calculate_version.outputs.version }}
          git tag $new_tag
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/OpenVirtualCluster/cli.git $new_tag

      - name: Create Release
        if: steps.tag_exists.outputs.exists == 'false'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.calculate_version.outputs.version }}
          name: Release ${{ steps.calculate_version.outputs.version }}
          draft: false
          prerelease: false
          artifacts: |
            ovc-linux
            ovc-darwin
            ovc.exe
            ovc-linux.sha256
            ovc-darwin.sha256
            ovc.exe.sha256
          token: ${{ secrets.GITHUB_TOKEN }}
